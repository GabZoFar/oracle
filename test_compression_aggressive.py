#!/usr/bin/env python3
"""
Test sp√©cifique pour la compression agressive - comparaison avant/apr√®s.
"""

import sys
from pathlib import Path

def test_aggressive_compression():
    """Test des nouveaux param√®tres de compression agressive."""
    print("üî• Test de la Compression Ultra-Agressive")
    print("=" * 50)
    
    try:
        from src.utils.audio_compression import audio_helper
        print("‚úÖ Module de compression import√© avec succ√®s")
    except ImportError as e:
        print(f"‚ùå √âchec de l'import du module de compression : {e}")
        return False
    
    # Test avec votre fichier de 52MB M4A
    file_size_mb = 52.0
    file_format = "m4a"
    
    print(f"\nüéµ Test avec votre fichier : {file_size_mb} MB {file_format.upper()}")
    print("-" * 30)
    
    # Anciens param√®tres (pour comparaison)
    print("üìä AVANT (anciens param√®tres) :")
    old_estimated = audio_helper.estimate_compressed_size(file_size_mb, file_format, "mp3", 128)
    print(f"   - Bitrate : 128 kbps")
    print(f"   - Mono : Non")
    print(f"   - Fr√©quence : Originale")
    print(f"   - Taille estim√©e : {old_estimated:.1f} MB")
    print(f"   - R√©duction : {((file_size_mb - old_estimated) / file_size_mb * 100):.1f}%")
    
    # Nouveaux param√®tres agressifs
    print("\nüî• APR√àS (nouveaux param√®tres agressifs) :")
    optimal_settings = audio_helper.get_optimal_compression_settings(file_size_mb, file_format)
    print(f"   - Bitrate : {optimal_settings['target_bitrate']} kbps")
    print(f"   - Mono : {'Oui' if optimal_settings['mono'] else 'Non'}")
    print(f"   - Fr√©quence : {optimal_settings['sample_rate']} Hz")
    print(f"   - Taille estim√©e : {optimal_settings['estimated_size_mb']:.1f} MB")
    print(f"   - R√©duction : {((file_size_mb - optimal_settings['estimated_size_mb']) / file_size_mb * 100):.1f}%")
    
    # Param√®tres ultra-agressifs (fallback)
    print("\nüíÄ ULTRA-AGRESSIF (si n√©cessaire) :")
    ultra_estimated = audio_helper.estimate_compressed_size(file_size_mb, file_format, "mp3", 16)
    print(f"   - Bitrate : 16 kbps")
    print(f"   - Mono : Oui")
    print(f"   - Fr√©quence : 11025 Hz")
    print(f"   - Taille estim√©e : {ultra_estimated:.1f} MB")
    print(f"   - R√©duction : {((file_size_mb - ultra_estimated) / file_size_mb * 100):.1f}%")
    
    # Comparaison des gains
    print("\nüìà COMPARAISON DES GAINS :")
    old_reduction = ((file_size_mb - old_estimated) / file_size_mb * 100)
    new_reduction = ((file_size_mb - optimal_settings['estimated_size_mb']) / file_size_mb * 100)
    ultra_reduction = ((file_size_mb - ultra_estimated) / file_size_mb * 100)
    
    improvement = new_reduction - old_reduction
    ultra_improvement = ultra_reduction - old_reduction
    
    print(f"   üî∏ Ancienne m√©thode : {old_reduction:.1f}% de r√©duction")
    print(f"   üî• Nouvelle m√©thode : {new_reduction:.1f}% de r√©duction (+{improvement:.1f}%)")
    print(f"   üíÄ Ultra-agressive : {ultra_reduction:.1f}% de r√©duction (+{ultra_improvement:.1f}%)")
    
    # V√©rification de compatibilit√©
    print("\n‚úÖ COMPATIBILIT√â WHISPER API :")
    print(f"   - Ancienne : {'‚úÖ Compatible' if old_estimated <= 25 else '‚ùå Trop volumineux'}")
    print(f"   - Nouvelle : {'‚úÖ Compatible' if optimal_settings['estimated_size_mb'] <= 25 else '‚ùå Trop volumineux'}")
    print(f"   - Ultra : {'‚úÖ Compatible' if ultra_estimated <= 25 else '‚ùå Trop volumineux'}")
    
    return True


def test_different_file_sizes():
    """Test avec diff√©rentes tailles de fichiers."""
    print("\nüéØ Test avec Diff√©rentes Tailles de Fichiers")
    print("=" * 50)
    
    from src.utils.audio_compression import audio_helper
    
    test_cases = [
        {"size": 30, "format": "mp3", "name": "MP3 l√©g√®rement trop gros"},
        {"size": 52, "format": "m4a", "name": "Votre fichier M4A"},
        {"size": 100, "format": "wav", "name": "WAV volumineux"},
        {"size": 200, "format": "flac", "name": "FLAC tr√®s volumineux"},
        {"size": 500, "format": "wav", "name": "WAV √©norme"},
    ]
    
    for case in test_cases:
        print(f"\nüìÅ {case['name']} ({case['size']} MB, {case['format'].upper()})")
        
        settings = audio_helper.get_optimal_compression_settings(case['size'], case['format'])
        reduction = ((case['size'] - settings['estimated_size_mb']) / case['size'] * 100)
        
        print(f"   üéõÔ∏è  Param√®tres : {settings['target_bitrate']} kbps, {'Mono' if settings['mono'] else 'St√©r√©o'}, {settings['sample_rate'] or 'Original'} Hz")
        print(f"   üìä R√©sultat : {case['size']} MB ‚Üí {settings['estimated_size_mb']:.1f} MB ({reduction:.1f}% r√©duction)")
        print(f"   ‚úÖ Whisper : {'Compatible' if settings['estimated_size_mb'] <= 25 else 'N√©cessite ultra-compression'}")


def main():
    """Fonction principale."""
    print("üß™ Test de Compression Agressive - Ma√Ætre Joueur")
    print("=" * 60)
    
    if not test_aggressive_compression():
        print("\n‚ùå Les tests ont √©chou√©")
        return 1
    
    test_different_file_sizes()
    
    print("\n" + "=" * 60)
    print("üéâ R√âSUM√â DES AM√âLIORATIONS :")
    print("‚úÖ Compression beaucoup plus agressive par d√©faut")
    print("‚úÖ Bitrates r√©duits (128‚Üí48 kbps pour fichiers moyens)")
    print("‚úÖ Conversion mono forc√©e pour meilleure compression")
    print("‚úÖ Fr√©quences d'√©chantillonnage r√©duites")
    print("‚úÖ Mode ultra-agressif automatique si n√©cessaire")
    print("‚úÖ R√©ductions de 80-95% au lieu de 5-30%")
    
    print("\nüí° Votre fichier de 52MB devrait maintenant :")
    print("   üî• Se compresser √† ~6.8 MB (87% de r√©duction)")
    print("   ‚úÖ √ätre compatible avec l'API Whisper")
    print("   üöÄ Se traiter automatiquement apr√®s compression")
    
    return 0


if __name__ == "__main__":
    sys.exit(main()) 